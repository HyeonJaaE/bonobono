{"version":3,"sources":["Components/Nav/index.tsx","api/getGithubInfo.ts","Components/Githubinfo/index.tsx","actions/authAction.tsx","Components/Home/index.tsx","App.tsx","serviceWorker.ts","reducers/authReducers.tsx","reducers/errorReducers.tsx","reducers/index.tsx","lib/loggerMiddleware.tsx","store.tsx","index.tsx"],"names":["Nav","navProp","getGithubInfo","username","a","axios","get","response","data","Githubinfo","dispatch","useDispatch","useState","name","setName","type","placeholder","onChange","e","target","value","onClick","foo","bar","JSON","stringify","split","txt","forEach","b","document","getElementsByClassName","innerHTML","payload","className","Home","auth","useSelector","state","src","isAuthenticated","user","login","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","initialState","loading","combineReducers","action","errors","loggerMiddleware","store","next","console","log","getState","result","middleware","thunk","createStore","rootReducer","compose","applyMiddleware","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4QAceA,EARH,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,QACV,OACI,2BACKA,I,0DCmCEC,EA1CI,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACKC,IAAMC,IAAN,uCACaH,IAFlB,cACZI,EADY,yBAKXA,EAASC,MALE,2CAAH,sDC6BJC,EA1BI,WACf,IAAMC,EAAWC,cADI,EAEGC,mBAAS,IAFZ,mBAEdC,EAFc,KAERC,EAFQ,KAGrB,OACI,6BACI,2BAAOC,KAAK,OAAOC,YAAY,YAAYC,SAAU,SAACC,GAAD,OAAOJ,EAAQI,EAAEC,OAAOC,UAC7E,4BACIC,QAAO,sBAAE,gCAAAjB,EAAA,sEACWF,EAAcW,GADzB,OACDS,EADC,OAEDC,EAAMC,KAAKC,UAAUH,GAAKI,MAAM,KAChCC,EAAM,GACVJ,EAAIK,SAAS,SAAAC,GAAOF,GAAOE,EAAI,WAC/BC,SAASC,uBAAuB,OAAO,GAAGC,UAAYL,EACtDjB,EChBT,CACHK,KAAM,mBACNkB,QDcoCX,IANnB,4CADb,mBAYA,qCAGI,uBAAGY,UAAU,UEFdC,EAlBF,WACX,IAAMC,EAAOC,aAAY,SAACC,GAAD,OAAiBA,EAAMF,QAChD,OACE,2BACA,uBAAKF,UAAU,WAAWK,IAAI,iNAC5B,uBAAKL,UAAU,OACb,gBAAC,EAAD,CAAKjC,QAAQ,uBACb,yBACE,mCACSmC,EAAKI,gBAAiBJ,EAAKK,KAAKC,MAAQ,KAGnD,gBAAC,EAAD,SCLOC,EARH,WACR,OACI,kBAAC,IAAD,CAAQC,SAAUC,aACd,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWb,MCIzBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BClBAC,EAAe,CACjBd,iBAAiB,EACjBC,KAAM,GACNc,SAAS,GCHPD,EAAe,GCINE,cAAgB,CAC3BpB,KFCW,WAAyC,IAAxCE,EAAuC,uDAA/BgB,EAAcG,EAAiB,uCACnD,OAAQA,EAAO1C,MACX,IAAK,mBACD,OAAO,2BACAuB,GADP,IAEIE,iBAAiB,EACjBC,KAAMgB,EAAOxB,UAErB,QACI,OAAOK,IETfoB,ODJW,WAA+C,IAArCpB,EAAoC,uDAA5BgB,EAAcG,EAAc,uCACzD,OAAQA,EAAO1C,MACX,IAAK,aACD,OAAO0C,EAAOxB,QAClB,QACI,OAAOK,MEMJqB,EAbU,SAACC,GAAD,OAAe,SAACC,GAAD,OAAc,SAACJ,GACnDK,QAAQC,IAAI,gBAAiBH,EAAMI,YACnCF,QAAQC,IAAI,SAAUN,GAGtB,IAAMQ,EAASJ,EAAKJ,GAKpB,OAHAK,QAAQC,IAAI,aAAcH,EAAMI,YAChCF,QAAQC,IAAI,MAELE,KCHLC,EAAa,CAACC,IAAOR,GAIZC,EAFDQ,YAAYC,EAHL,GAGgCC,YAAQC,IAAe,WAAf,EAAmBL,KCDhFM,IAASC,OACP,kBAAC,IAAD,CAAUb,MAAOA,GACf,kBAAC,EAAD,OAEA9B,SAAS4C,eAAe,SN+HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.59ca5155.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\ntype navTypes = {\r\n    navProp: string\r\n}\r\n\r\nconst Nav = ({navProp} : navTypes) => {\r\n    return(\r\n        <div>\r\n            {navProp}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;","import axios from \"axios\";\r\n\r\nconst getGithubInfo = async (username: string) => {\r\n    const response = await axios.get<GithubProfile>(\r\n        `https://api.github.com/users/${username}`\r\n    );\r\n\r\n    return response.data;\r\n}\r\n\r\nexport interface GithubProfile {\r\n    login: string;\r\n    id: number;\r\n    node_id: string;\r\n    avatar_url: string;\r\n    gravatar_id: string;\r\n    url: string;\r\n    html_url: string;\r\n    followers_url: string;\r\n    following_url: string;\r\n    gists_url: string;\r\n    starred_url: string;\r\n    subscriptions_url: string;\r\n    organizations_url: string;\r\n    repos_url: string;\r\n    events_url: string;\r\n    received_events_url: string;\r\n    type: string;\r\n    site_admin: boolean;\r\n    name: string;\r\n    company: string;\r\n    blog: string;\r\n    location: null;\r\n    email: null;\r\n    hireable: null;\r\n    bio: string;\r\n    public_repos: number;\r\n    public_gists: number;\r\n    followers: number;\r\n    following: number;\r\n    created_at: Date;\r\n    updated_at: Date;\r\n}\r\n\r\nexport default getGithubInfo;","import React, { useState } from \"react\";\r\nimport getGithubInfo from \"../../api/getGithubInfo\";\r\nimport { setCurrentUser } from \"../../actions/authAction\"\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst Githubinfo = () => {\r\n    const dispatch = useDispatch();\r\n    const [name, setName] = useState(\"\");\r\n    return (\r\n        <div>\r\n            <input type=\"text\" placeholder=\"github id\" onChange={(e) => setName(e.target.value)}></input>\r\n            <button\r\n                onClick={async () => {\r\n                    let foo = await getGithubInfo(name);\r\n                    let bar = JSON.stringify(foo).split(',');\r\n                    let txt = \"\";\r\n                    bar.forEach( b => { txt += b + '<br/>'})\r\n                    document.getElementsByClassName(\"log\")[0].innerHTML = txt;\r\n                    dispatch(setCurrentUser(foo));\r\n                }}\r\n            >\r\n                GET GITHUB INFO\r\n            </button>\r\n            <p>\r\n                INFO : \r\n                </p>\r\n                <p className=\"log\"></p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Githubinfo;\r\n","// set logged in user\r\nexport const setCurrentUser = (user:any) => {\r\n    return {\r\n        type: \"SET_CURRENT_USER\",\r\n        payload: user,\r\n    };\r\n};\r\n","import * as React from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport Nav from \"../Nav\";\r\nimport \"./home.scss\"\r\nimport Githubinfo from \"../Githubinfo\";\r\n\r\nconst Home = () => {\r\n  const auth = useSelector((state : any) => state.auth);\r\n  return(\r\n    <div>\r\n    <img className=\"bonobono\" src=\"https://lh3.googleusercontent.com/proxy/H0D6NjBYlo8h5Frmj7EcWIOK59aQLeC4vUrIr61KW2CuL62CdTc4yrVHKHhgvTCA98Ox69FMgACeT1qgcsFMugWLOYMmnptkSCNdJDvvvhnLFKWHc5FP9o-91FimRPu9untu8m592kljaiTYbs0R0GWPww6YIXgpamvS\"></img>\r\n      <div className=\"foo\">\r\n        <Nav navProp=\"This is navigation\"/>\r\n        <p>\r\n          <h1>\r\n            Hello {auth.isAuthenticated? auth.user.login : \"\"}\r\n          </h1>\r\n        </p>\r\n        <Githubinfo/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home;","import React from \"react\";\r\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nimport Home from \"./Components/Home\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n            <Route exact path=\"/\" component={Home} />\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false,\r\n};\r\n\r\nexport default (state = initialState, action : any) => {\r\n    switch (action.type) {\r\n        case \"SET_CURRENT_USER\":\r\n            return {\r\n                ...state,\r\n                isAuthenticated: true,\r\n                user: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// 리듀서에서 함수 ( state, action )을 export\r\n// XXXaction.js 에서 dispatch( e ) 함수 사용, e 가 action으로 전달\r\n// e { type: XXX, payload: XXX}\r\n// 리듀서에서 받은 e에 따라서 스토어에 정보 저장, 갱신","const initialState = {};\r\n\r\nexport default function (state = initialState, action : any) {\r\n    switch (action.type) {\r\n        case \"GET_ERRORS\":\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport authReducer from \"../reducers/authReducers\";\r\nimport errorReducer from \"../reducers/errorReducers\";\r\n\r\nexport default combineReducers({\r\n    auth: authReducer,\r\n    errors: errorReducer\r\n});","const loggerMiddleware = (store:any) => (next:any) => (action:any) => {\r\n    console.log(\"current state\", store.getState());\r\n    console.log('action', action);\r\n    \r\n    //액션을 다음 미들웨어, 혹은 리듀서로 전달\r\n    const result = next(action);\r\n    \r\n    console.log(\"next state\", store.getState());\r\n    console.log('\\n');\r\n\r\n    return result;\r\n}\r\n\r\nexport default loggerMiddleware;","\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\nimport loggerMiddleware from \"./lib/loggerMiddleware\"\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk, loggerMiddleware];\r\n\r\nconst store = createStore(rootReducer, initialState, compose(applyMiddleware(...middleware)));\r\n\r\nexport default store;\r\n\r\n/*\r\ncreateStore(reducer, [preloadedState], [enhancer])\r\ncompose to enhance a store with applyMiddleware and a few developer tools from the redux-devtools package.\r\n*/","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n    document.getElementById('root') as HTMLElement\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}